{"version":3,"sources":["Assets/Actions/Actions.js","Assets/Components/Launches.js","App.js","serviceWorker.js","Assets/Reducers/LaunchReducer.js","Assets/Reducers/CombineReducers.js","index.js"],"names":["getLaunches","launches","type","payload","years","Launches","state","lurl","land_success","getUserData","axios","get","then","response","props","data","console","log","catch","error","finally","selectYear","y","arr","split","index","indexOf","splice","join","setState","checkLaunch","value","substr","checkLanding","this","prevprops","prevstate","className","map","i","Button","key","onClick","l","Card","style","width","Img","variant","src","links","mission_patch_small","height","Body","mission_name","Title","rocket","rocket_name","launch_year","launch_success","Component","connect","store","dispatch","bindActionCreators","App","Boolean","window","location","hostname","match","defaultstate","combineReducers","action","createStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0f107c07.chunk.js","sourcesContent":["//2.action types\r\nexport const LAUNCHES = \"LAUNCHES_INFO\"\r\n\r\n//3.Action Creators\r\nexport const getLaunches = launches => {\r\n    return{\r\n        type: LAUNCHES,\r\n        payload: launches\r\n    }\r\n}","import React, { Component } from \"react\"\r\nimport axios from \"axios\"\r\nimport \"../Styles/launches.css\"\r\nimport { Card, Button } from \"react-bootstrap\"\r\nimport { bindActionCreators } from \"redux\"\r\nimport { getLaunches } from \"../Actions/Actions\"\r\nimport { connect } from \"react-redux\"\r\n\r\nconst years = [\"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"]\r\n\r\nclass Launches extends Component {\r\n    state = {\r\n        lurl: \"https://api.spacexdata.com/v3/launches?limit=100\",        \r\n        land_success: true,        \r\n    }\r\n\r\n    getUserData = () => {\r\n        axios.get(`${this.state.lurl}`)\r\n            .then((response) => {\r\n                // handle success                                \r\n                this.props.getLaunches(response.data)\r\n                console.log(\"launches\", this.props.launches)\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n            .finally(function () {\r\n                // always executed\r\n            });\r\n    }\r\n\r\n    selectYear = (y) => {        \r\n        let { lurl } = this.state\r\n        let arr = lurl.split(\"\")\r\n        let index = lurl.indexOf(\"launch_year\")\r\n        if (index == -1)\r\n            lurl += \"&launch_year=\" + y\r\n        else {\r\n            index += 12            \r\n            arr.splice(index, 4, y)\r\n            lurl = arr.join(\"\")            \r\n        }\r\n        this.setState({ lurl })        \r\n    }\r\n    checkLaunch = value => {        \r\n        let { lurl } = this.state\r\n        let arr = lurl.split(\"\")\r\n        let index = lurl.indexOf(\"launch_success\")\r\n        if (index == -1)\r\n            lurl += \"&launch_success=\" + value\r\n        else {\r\n            index += 15\r\n            let prev = lurl.substr(index, 4)            \r\n            if (prev == \"true\")\r\n                arr.splice(index, 4, value)\r\n            else\r\n                arr.splice(index, 5, value)\r\n            lurl = arr.join(\"\")            \r\n        }\r\n        this.setState({ lurl })        \r\n    }\r\n    checkLanding = value => {        \r\n        let { lurl,land_success } = this.state\r\n        land_success = value\r\n        let arr = lurl.split(\"\")\r\n        let index = lurl.indexOf(\"land_success\")\r\n        if (index == -1)\r\n            lurl += \"&land_success=\" + value\r\n        else {\r\n            index += 13\r\n            let prev = lurl.substr(index, 4)            \r\n            if (prev == \"true\")\r\n                arr.splice(index, 4, value)\r\n            else\r\n                arr.splice(index, 5, value)\r\n            lurl = arr.join(\"\")            \r\n        }\r\n        this.setState({ lurl,land_success })        \r\n    }\r\n    componentDidMount() {\r\n        this.getUserData()\r\n    }\r\n    componentDidUpdate(prevprops, prevstate) {\r\n        if (prevstate.lurl != this.state.lurl)\r\n            this.getUserData()\r\n    }\r\n\r\n    render() {\r\n        const { launches } = this.props\r\n        const { land_success } = this.state\r\n        return (\r\n            <div className=\"launches\">\r\n                <h3>SpaceX Launch Programs</h3>\r\n                <div className=\"lbox\">\r\n                    <div className=\"filter\">\r\n                        <h4>Filters</h4>\r\n                        <h5>Launch Year</h5>\r\n                        <div className=\"launch_y\">\r\n                            {years.map((y, i) => {\r\n                                return (\r\n                                    <Button key={i} className=\"ybutton\" onClick={() => this.selectYear(y)}>{y}</Button>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                        <h5>Successful Launch</h5>\r\n                        <div className=\"launch_s\">\r\n                            <Button onClick={() => this.checkLaunch(true)}>True</Button>\r\n                            <Button onClick={() => this.checkLaunch(false)}>False</Button>\r\n                        </div>\r\n                        <h5>Successful Landing</h5>\r\n                        <div className=\"launch_l\">\r\n                            <Button onClick={() => this.checkLanding(true)}>True</Button>\r\n                            <Button onClick={() => this.checkLanding(false)}>False</Button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"launchbox\">\r\n                        {launches.map((l, i) => {\r\n                            return (\r\n                                <Card style={{ width: '18rem' }} key={i} className=\"lcard\" >\r\n                                    <Card.Img variant=\"top\" src={l.links.mission_patch_small} height=\"150px\" />\r\n                                    <Card.Body>\r\n                                        <h2>{l.mission_name}</h2>\r\n                                        <Card.Title>Mission Details:</Card.Title>\r\n                                        <ul>\r\n                                            <li>Mission Ids: {l.rocket.rocket_name}</li>                                            \r\n                                            <li>Launch Year: {l.launch_year} </li>                                            \r\n                                            <li>Successful Launch: {`${l.launch_success}`} </li>\r\n                                            <li>Successful Landing: {`${land_success}`} </li>\r\n                                        </ul>                                        \r\n                                    </Card.Body>\r\n                                </Card>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                <div className=\"developer\">\r\n                    Developed by: Kartik Aggarwal\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return {\r\n        launches: store.launches\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        { getLaunches }, dispatch\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Launches)","import React from 'react';\nimport Launches from \"./Assets/Components/Launches\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Launches />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {LAUNCHES} from \"../Actions/Actions\"\r\n\r\nlet defaultstate=[]\r\nexport default function LaunchReducer(state=defaultstate,action)\r\n{\r\n    switch(action.type){\r\n        case LAUNCHES: {\r\n            state = action.payload\r\n            return state\r\n        }\r\n        default: return state\r\n    }\r\n}","import launches from \"./LaunchReducer\"\r\nimport { combineReducers } from \"redux\"\r\n\r\nexport default combineReducers({\r\n    launches: launches\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from \"./Assets/Reducers/CombineReducers\"\nimport { createStore } from 'redux';\nimport {Provider} from \"react-redux\"\n\nconst store = createStore(reducer)\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}